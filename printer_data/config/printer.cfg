[include mainsail.cfg]
[include KAMP_Settings.cfg]

[mcu]
canbus_uuid: 21f58758bb02
# CAN bus is also available on this board
#restart_method: command


# run the following command to locate the uuid >   ~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0

[mcu EBBCan]
canbus_uuid: 27a253a76d8c


[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: x,y,z

[extruder]
step_pin: EBBCan: PD0
dir_pin: EBBCan: PD1
enable_pin: !EBBCan: PD2
microsteps: 8
rotation_distance: 7.556
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: EPCOS 100K B57560G104F
sensor_pin: EBBCan: PA3
control: pid
pid_kp: 7.942
pid_ki: 0.204
pid_kd: 77.436
min_temp: 0
max_temp: 350
max_extrude_cross_section: 5
pressure_advance: 0.02

# sensor_type:MAX31865
# sensor_pin: EBBCan: PA4
# spi_bus: spi1
# rtd_nominal_r: 100
# rtd_reference_r: 430
# rtd_num_of_wires: 2

[tmc2209 extruder]
uart_pin: EBBCan: PA15
run_current: 0.450
#stealthchop_threshold: 30

[fan]
pin: EBBCan: PA0

[heater_fan hotend_fan]
pin: EBBCan: PA1
heater: extruder
heater_temp: 50.0

#[neopixel hotend_rgb]
#pin: EBBCan:PD3

[bltouch]
sensor_pin: ^EBBCan:PB8
control_pin: EBBCan:PB9
#pin_up_touch_mode_reports_triggered: true
probe_with_touch_mode: true
x_offset: 30
y_offset: -5
z_offset: 2.00
speed: 2.0
samples: 2
sample_retract_dist: 3.5

#[filament_switch_sensor switch_sensor]
#switch_pin: EBBCan:PB4

#[filament_motion_sensor motion_sensor]
#switch_pin: ^EBBCan:PB3



[printer]
kinematics: corexy
max_velocity: 2500
max_accel: 2500
max_z_velocity: 150
max_z_accel: 75

[resonance_tester]
accel_chip: adxl345
accel_per_hz: 50
probe_points: 140,140,10

[input_shaper]
shaper_type_x: 2hump_ei
shaper_freq_x: 96.2
shaper_type_y: mzv
shaper_freq_y: 48.4

[z_tilt]
z_positions:                   ## This is at the beginning of the line, no indents, no tabs
 0, 145            ## This is a tab spaced from the beginning of the line or indented to the position of z_positions:
 295, 145             ## This is a tab spaced from the beginning of the line or indented to the position of z_positions: 
 
points:
 5, 145           ## This is a tab spaced from the beginning of the line or indented to the position of z_positions:
 265, 145             ## This is a tab spaced from the beginning of the line or indented to the position of z_positions:
speed: 200
horizontal_move_z: 5
retries: 20
retry_tolerance: .0025


[pause_resume]
recover_velocity: 100
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

[firmware_retraction]
retract_length: 0
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
retract_speed: 45
#   The speed of retraction, in mm/s. The default is 20 mm/s.
unretract_extra_length: 0.00
#   The length (in mm) of *additional* filament to add when
#   unretracting.
unretract_speed: 45
#   The speed of unretraction, in mm/s. The default is 10 mm/s.

[force_move]
# Enable commands that force potentially unsafe movement
enable_force_move: True

[gcode_macro UNSAFE_LOWER_BED]
description: Lower the bed 10mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z10 F600
  M84

[gcode_macro UNSAFE_LOWER_RAISE]
description: Lower the bed 10mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z-10 F600
  M84



[stepper_x]
step_pin: PF13
dir_pin: !PF12
enable_pin: !PF14
microsteps: 16
rotation_distance: 40
endstop_pin: EBBCan:PB6
position_endstop: 0
position_max: 295
homing_speed: 100


[stepper_y]
step_pin: PG0
dir_pin: !PG1
enable_pin: !PF15
microsteps: 16
rotation_distance: 40
endstop_pin: PG9
position_endstop: 0
position_max: 281
homing_speed: 100

# BEDS
[stepper_z]
step_pin: PF11
dir_pin: !PG3
enable_pin: !PG5
microsteps: 8
rotation_distance: 8.040
#endstop_pin: PG10
endstop_pin: probe:z_virtual_endstop
#position_endstop: 0
position_max: 250
position_min: -10

[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
microsteps: 8
rotation_distance: 8.040


# LEVELING
#[safe_z_home]
#home_xy_position: 125, 150 # Change coordinates to the center of your print bed
#speed: 75
#z_hop: 10                 # Move up 10mm
#z_hop_speed: 5

[homing_override]
axes: xyz
set_position_z: 0
gcode:
  G1 Z10 F600
  G28 Y
  G1 Y165 F9000
  G28 X
  G1 X140 Y140 F9000
  G28 Z


[bed_mesh]
speed: 150
horizontal_move_z: 5
mesh_min: 30, 5      #!!min and max co-ords are based on the probes location not the nozzle!!
mesh_max: 260, 260  #needs to be calibrated for your individual printer
probe_count: 6,6 #this is the number of probing points on X then Y axis
mesh_pps: 2,2
fade_start: 1
fade_end: 5
fade_target: 0


# EXTRUDER
#[extruder]
#step_pin: PF9
#dir_pin: PF10
#enable_pin: !PG2
#microsteps: 8
#rotation_distance: 7.556
#nozzle_diameter: 0.400
#filament_diameter: 1.750
#heater_pin: PA2 # HE0
#sensor_pin:  PF4 # T0
#sensor_type: EPCOS 100K B57560G104F
#control: pid
#pid_kp: 8.752
#pid_ki: 0.250
#pid_kd: 76.467
#min_temp: 0
#max_temp: 300

#[heater_fan Hotend] 
#pin: PA3 # FAN1
#heater: extruder
#heater_temp: 50.0

[heater_bed]
heater_pin: PA1
sensor_pin: PF3 # TB
sensor_type: EPCOS 100K B57560G104F
control: pid
pid_kp: 48.118
pid_ki: 1.087
pid_kd: 532.301
max_power: 0.75
min_temp: 0
max_temp: 110


[filament_motion_sensor encoder_sensor]
detection_length: 14
#   The minimum length of filament pulled through the sensor to trigger
#   a state change on the switch_pin
#   Default is 7 mm.
extruder: extruder
#   The name of the extruder section this sensor is associated with.
#   This parameter must be provided.
switch_pin: PG12
# changing the switch_pin name according to your motherboard
pause_on_runout: True
runout_gcode: FILAMENT_RUNOUT
#insert_gcode:
#event_delay:
#pause_delay:


# Driver5
#[extruder1]
#step_pin: PC13
#dir_pin: PF0
#enable_pin: !PF1
#heater_pin: PA3 # HE1
#sensor_pin: PF5 # T1
#...

#[filament_switch_sensor material_1]
#switch_pin: PG13

# Driver6
#[extruder2]
#step_pin: PE2
#dir_pin: PE3
#enable_pin: !PD4
#heater_pin: PB10 # HE2
#sensor_pin: PF6 # T2
#...

#[filament_switch_sensor material_2]
#switch_pin: PG14

# Driver7
#[extruder3]
#step_pin: PE6
#dir_pin: PA14
#enable_pin: !PE0
#heater_pin: PB11 # HE3
#sensor_pin: PF7 # T3
#...

#[filament_switch_sensor material_3]
#switch_pin: PG15



#[fan]
#pin: PB10

[multi_pin Enclosure_pins]
pins: PA8, PD15, PD12, PD13

[controller_fan Enclosure]
pin: multi_pin:Enclosure_pins
kick_start_time: 0.5







#[controller_fan fan5]
#pin: PD15



########################################
# TMC2209 configuration
########################################

[tmc2208 stepper_x]
uart_pin: PC4
##diag_pin: PG6
run_current: 0.800
stealthchop_threshold: 100

[tmc2208 stepper_y]
uart_pin: PD11
##diag_pin: PG9
run_current: 0.800
stealthchop_threshold: 100

[tmc2209 stepper_z]
uart_pin: PC6
#diag_pin: PG10
run_current: 0.650
stealthchop_threshold: 30

[tmc2209 stepper_z1]
uart_pin: PC7
#diag_pin: PG11
run_current: 0.650
stealthchop_threshold: 30

#[tmc2209 extruder]
#uart_pin: PF2
#run_current: 0.750
#stealthchop_threshold: 30

[display]
lcd_type: st7920
cs_pin: EXP1_4
sclk_pin: EXP1_5
sid_pin: EXP1_3
encoder_pins: ^EXP2_3, ^EXP2_5
click_pin: ^!EXP1_2
#kill_pin: ^!EXP2_8

[output_pin beeper]
pin: EXP1_1


[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=PC5

[save_variables]
filename: ~/klipper_config/variables.cfg ; variable storage file

[gcode_macro START_PRINT]
gcode:
    G92 E0
    G28 ; Home
    BED_MESH_CALIBRATE  
    {% set BED_TEMP = params.BED_TEMP|default(65)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}
    # LEVEL_BED_ADVANCED MAX_AGE=10 ; probe mesh eventually
    M355 S1 P8
    LINE_PURGE
    # ... whatever else you want to do before print

[gcode_macro END_PRINT]
gcode:
    G91 ; Relative positioning
    G1 E-3 F120 ; Retract
    G1 F3000 Z3 ; Move up
    G90 ; Absolute pos.
    G1 X50 Y250 Z240; present print
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    M355 S0
    #SAVE_IF_SET     ; SAVE_CONFIG if a mesh was probed in START_PRINT
    M84 ; Disable steppers

; This is where the magic happens:
; MAX_AGE is checked against the stored variable
; SAVE=1 can be used to force saving the mesh (restarts klipper, so
;        only for manual usage)
; FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached
[gcode_macro LEVEL_BED_ADVANCED]
description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
variable_save_at_end: 0
gcode:
  {% set max_age = params.MAX_AGE|default(10)|int %}
  {% set force_level = params.FORCE|default(0)|int %}
  {% set save = params.SAVE|default(0)|int %}

  ; load level_age from stored variables
  {% set svv = printer.save_variables.variables %}
  {% if "level_age" not in svv %} ; first run
    SAVE_VARIABLE VARIABLE=level_age VALUE={max_age}
    {% set level_age = 1 %}
  {% else %} ; load level_age and increment
    {% set level_age = svv.level_age %}
    SAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}
  {% endif %}
  {action_respond_info("Bed mesh age is " + level_age|string) + "."} 

  ; Level eventually
  {% if force_level or (level_age >= max_age|int) %}
    {action_respond_info("Bed mesh exceeded max age. Leveling...")} 

    ; homing if not homed yet
    {% if 'xy' not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
  
    BED_MESH_CALIBRATE
    {% if save %}
      SAVE_VARIABLE VARIABLE=level_age VALUE=1 ; reset counter
      SAVE_CONFIG
    {% else %}
      SET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1
    {% endif %}
  {% else %}
    {action_respond_info("Loading old bed mesh.")} 
    BED_MESH_PROFILE LOAD=default
  {% endif %} 

# runs SAVE_CONFIG if the g-code variable was set in start gcode
[gcode_macro SAVE_IF_SET]
gcode:
  {% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}
  {action_respond_info("Saving was requested - saving and restarting now.")}
  SAVE_VARIABLE VARIABLE=level_age VALUE=1
  SAVE_CONFIG
  {% endif %}

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-2 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-125 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[output_pin LIGHT_pin]
pin: PD14
pwm: False
value: 0

[gcode_macro M355]
gcode:
  {% set S = params.S|default(1)|int %}
  #default_parameter_S=1
  SET_PIN PIN=LIGHT_pin VALUE={S}




#[neopixel my_neopixel]
#pin: PB0

# TEMP 
[temperature_sensor Octopus_CPU_Temp]  
sensor_type: temperature_mcu

# Enable object exclusion
[exclude_object]

# Enable arcs support
[gcode_arcs]
resolution: 0.1

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    
  

######################################################################
# G130: Set digital potentiometer value
######################################################################

# The macro below uses the MCP4018 SET_DIGIPOT command to implement
# a `G130` as used on classic Mightyboard-based printers such as
# The Makerbot Replicator 2/2X.
#
# The `G130` command can be used to lower the stepper current
# during preheating and raise the current again prior to starting
# the print.  This is necessary for printers with smaller power
# supplies that needed all the power to heat the bed.
#
# This macro requires one or more [mcp4018] configuration sections:
# (x_axis_pot, y_axis_pot, z_axis_pot, a_axis_pot, b_axis_pot)
#
# Example: G130 X20 Y20 Z20 A20 B20 ; Lower stepper Vrefs while heating

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.060300, 0.065325, 0.035175, -0.010050
#*# 	  0.027637, 0.062812, 0.062812, 0.022612
#*# 	  -0.062813, 0.025125, 0.042712, 0.030150
#*# x_count = 4
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 95.117
#*# max_x = 190.997
#*# min_y = 94.54
#*# max_y = 191.0

